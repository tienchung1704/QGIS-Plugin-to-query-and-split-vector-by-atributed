# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PhanLoaiDuLieuDialog
                                 A QGIS plugin
 Test
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-11-19
        git sha              : $Format:%H$
        copyright            : (C) 2024 by AnhTuIT1
        email                : trananhtu6403@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject, QgsVectorLayer
from PyQt5.QtWidgets import QComboBox, QLineEdit, QPushButton, QFileDialog, QMessageBox
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'phan_loai_du_lieu_dialog_base.ui'))


class PhanLoaiDuLieuDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(PhanLoaiDuLieuDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        # Gọi setupUi(self) để khởi tạo giao diện từ file .ui
        self.setupUi(self)  # Thiết lập giao diện vào đối tượng hiện tại

        self.LayerCombo.currentIndexChanged.connect(self.update_columns)

        self.populate_layers()

    def update_columns(self):
        """Cập nhật các cột thuộc tính trong ColumnCombo khi lớp được chọn"""
        layer_name = self.LayerCombo.currentText()
        layers = QgsProject.instance().mapLayersByName(layer_name)

        if len(layers) > 0:
            layer = layers[0]  # Lớp đã chọn
            fields = layer.fields()
            self.ColumnCombo.clear()  # Xóa các cột hiện tại
            for field in fields:
                self.ColumnCombo.addItem(field.name())  # Thêm tên cột vào ColumnCombo

    def populate_layers(self):
        """Lấy tất cả các lớp vector trong QGIS và hiển thị tên của chúng trong LayerCombo"""
        self.LayerCombo.clear()  # Xóa các lớp hiện có trong LayerCombo
        layers = QgsProject.instance().mapLayers().values()

        for layer in layers:
            if isinstance(layer, QgsVectorLayer):  # Kiểm tra nếu là lớp vector
                self.LayerCombo.addItem(layer.name())  # Thêm tên lớp vào LayerCombo
    def select_directory(self):
        self.LayerCombo.clear()  # Xóa các lớp hiện có trong LayerCombo
        layers = QgsProject.instance().mapLayers().values()

        for layer in layers:
            if isinstance(layer, QgsVectorLayer):  # Kiểm tra nếu là lớp vector
                self.LayerCombo.addItem(layer.name())  # Thêm tên lớp vào LayerCombo

