# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PhanLoaiDuLieu
                                 A QGIS plugin
 Test
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-19
        git sha              : $Format:%H$
        copyright            : (C) 2024 by AnhTuIT1
        email                : trananhtu6403@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .phan_loai_du_lieu_dialog import PhanLoaiDuLieuDialog
import os.path


class PhanLoaiDuLieu:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PhanLoaiDuLieu_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&PhanLoaiGiaoThong')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PhanLoaiDuLieu', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/phan_loai_du_lieu/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Attribute split'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&PhanLoaiGiaoThong'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PhanLoaiDuLieuDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


from qgis.core import QgsProject, QgsVectorFileWriter, QgsWkbTypes, QgsVectorLayer, QgsField, QgsFeature, QgsError
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWidgets import QMessageBox
import os


class PhanLoaiDuLieu:
    def __init__(self, iface):
        self.iface = iface  # Tham chiếu đến giao diện QGIS
        self.dlg = None

    def initGui(self):
        # Tạo nút trong thanh công cụ để kích hoạt plugin
        self.action = QAction("Phân loại dữ liệu", self.iface.mainWindow())
        self.action.triggered.connect(self.run)
        self.iface.addToolBarIcon(self.action)

    def run(self):
        # Tạo và hiển thị dialog để người dùng nhập thông tin
        self.dlg = PhanLoaiDuLieuDialog()  # Đối tượng chứa giao diện
        self.dlg.show()
        result = self.dlg.exec_()  # Chờ người dùng tương tác

        if result:  # Nếu người dùng nhấn OK
            self.filter_and_display()  # Gọi hàm thực hiện phân loại và hiển thị dữ liệu

    def unload(self):
        # Gỡ bỏ nút khi plugin bị tắt
        self.iface.removeToolBarIcon(self.action)

    def filter_and_display(self):
        # Lấy thông tin từ giao diện người dùng
        layer_name = self.dlg.LayerCombo.currentText()  # Lớp dữ liệu người dùng chọn
        column_name = self.dlg.ColumnCombo.currentText()  # Thuộc tính người dùng chọn
        base_value = self.dlg.BaseEdit.text()  # Giá trị trong baseEdit

        # Kiểm tra nếu thông tin không hợp lệ
        if not layer_name or not column_name or not base_value:
            QMessageBox.critical(None, "Lỗi", "Vui lòng điền đầy đủ thông tin!")
            return

        # Tìm lớp dữ liệu
        layers = QgsProject.instance().mapLayersByName(layer_name)
        if len(layers) == 0:
            QMessageBox.critical(None, "Lỗi", f"Không tìm thấy lớp '{layer_name}'!")
            return
        layer = layers[0]  # Giả sử lớp đầu tiên trong danh sách là lớp cần dùng

        # Thiết lập bộ lọc cho lớp dữ liệu dựa trên cột và giá trị
        query = f"{column_name} = '{base_value}'"
        layer.setSubsetString(query)

        # Hiển thị lớp đã lọc lên bản đồ
        QgsProject.instance().addMapLayer(layer)

        # Lấy danh sách các giá trị duy nhất trong cột
        unique_values = self.get_unique_values(layer, column_name)

        # Cảnh báo nếu có quá nhiều giá trị duy nhất (có thể thay đổi số lượng này)
        if len(unique_values) > 25:
            if QMessageBox.warning(None, "Cảnh báo",
                                   f"Đang có {len(unique_values)} giá trị duy nhất! Bạn có muốn tiếp tục?",
                                   QMessageBox.Ok | QMessageBox.Cancel, QMessageBox.Cancel) == QMessageBox.Cancel:
                return

        # Phân loại dữ liệu (split) theo giá trị của thuộc tính
        self.split_layer_by_attribute(layer, column_name, unique_values)

    def split_layer_by_attribute(self, layer, column_name, unique_values):
        for value in unique_values:
            # Lọc lớp theo mỗi giá trị duy nhất
            query = f"{column_name} = '{value}'"
            layer.setSubsetString(query)

            # Tạo lớp bộ nhớ
            geometry_type = layer.geometryType()
            crs = layer.crs()

            if geometry_type == QgsWkbTypes.UnknownGeometry:
                QMessageBox.critical(None, "Lỗi", f"Không xác định kiểu hình học cho lớp '{value}'")
                continue

            # Tạo lớp bộ nhớ với loại geometry phù hợp (line string)
            memory_layer = QgsVectorLayer("LineString?crs={}".format(layer.crs().authid()), f"{value}_layer", "memory")

            # Kiểm tra lớp bộ nhớ có hợp lệ không
            if not memory_layer.isValid():
                QMessageBox.critical(None, "Thông tin CRS và Geometry",
                                     f"CRS: {crs.authid()}, GeometryType: {geometry_type}")
                continue

            memory_provider = memory_layer.dataProvider()

            # Sao chép các trường (attributes) từ lớp gốc sang lớp mới
            memory_provider.addAttributes(layer.fields())
            memory_layer.updateFields()

            # Sao chép các đối tượng (features) từ lớp gốc vào lớp mới
            features = layer.getFeatures()
            memory_provider.addFeatures(features)

            # Kiểm tra lớp bộ nhớ sau khi sao chép dữ liệu
            if memory_layer.isValid():
                options = QFileDialog.Options()
                save_file, _ = QFileDialog.getSaveFileName(
                    None, f"Lưu lớp dữ liệu cho {value}", "", "Shapefile (*.shp);;GeoJSON (*.geojson)", options=options)

                if save_file:
                    if not save_file.endswith(".shp"):
                        save_file += ".shp"

                    error_code, error_msg = QgsVectorFileWriter.writeAsVectorFormat(layer, save_file, "UTF-8",
                                                                                    memory_layer.crs(),
                                                                                    "ESRI Shapefile")
                    if error_code == QgsVectorFileWriter.NoError:
                        QMessageBox.information(None, "Thành công",
                                                f"Lớp dữ liệu cho {value} đã được lưu tại: {save_file}")
                    else:
                        QMessageBox.critical(None, "Lỗi", f"Không thể lưu lớp dữ liệu cho {value}! Lỗi: {error_msg}")
                else:
                    QMessageBox.warning(None, "Lỗi", "Không có tệp nào được chọn để lưu.")
            else:
                QMessageBox.critical(None, "Lỗi", f"Lớp bộ nhớ không hợp lệ khi sao chép dữ liệu cho {value}")

    def get_unique_values(self, layer, column_name):
        # Lấy danh sách các giá trị duy nhất trong cột
        unique_values = set()
        for feature in layer.getFeatures():
            unique_values.add(feature[column_name])
        return unique_values
